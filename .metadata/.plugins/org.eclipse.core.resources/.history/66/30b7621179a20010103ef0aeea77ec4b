package com.example.demo;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;
import org.springframework.security.config.web.server.ServerHttpSecurity;
import org.springframework.security.core.userdetails.MapReactiveUserDetailsService;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.server.SecurityWebFilterChain;

@Configuration
@EnableWebFluxSecurity
public class SecurityConfig {

    @Bean
    public MapReactiveUserDetailsService userDetailsService() {
        UserDetails user = User.withDefaultPasswordEncoder()
                .username("admin")  // Matches spring.security.user.name in properties
                .password("pass")  // Matches spring.security.user.password
                .roles("USER")
                .build();
        return new MapReactiveUserDetailsService(user);
    }

    @Bean
    public SecurityWebFilterChain securityWebFilterChain(ServerHttpSecurity http) {
        http
            .authorizeExchange(exchanges -> exchanges
                .pathMatchers(HttpMethod.GET, "/products/**", "/orders/**").permitAll()  // Allow unauthenticated GET for products and orders
                .pathMatchers("/swagger-ui/**", "/v3/api-docs/**").permitAll()  // Optionally permit Swagger UI and API docs if needed
                .anyExchange().authenticated()  // Require auth for all other requests
            )
            .httpBasic();  // Enable Basic Auth
        return http.build();
    }
}