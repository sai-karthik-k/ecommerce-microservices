package com.example.demo.service;

import com.example.demo.client.ProductClient;
import com.example.demo.model.Order;
import com.example.demo.model.Product;  // From common module
import com.example.demo.repository.OrderRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class OrderService {

    @Autowired
    private OrderRepository repository;

    @Autowired
    private ProductClient productClient;

    public List<Order> getAll() {
        return repository.findAll();
    }

    public Order getById(Long id) {
        return repository.findById(id).orElseThrow(() -> new RuntimeException("Order not found"));
    }

    public Order create(Order order) {
        Product product = productClient.getProductById(order.getProdId());
        if (product.getQuantity() < order.getQuantity()) {
            throw new RuntimeException("Insufficient product quantity");
        }
        order.setTotalPrice(product.getPrice() * order.getQuantity());
        // TODO: Call products-service to update quantity (e.g., via Feign POST)
        return repository.save(order);
    }

    public Order update(Long id, Order updatedOrder) {
        Order existing = repository.findById(id).orElseThrow(() -> new RuntimeException("Order not found"));
        Product product = productClient.getProductById(updatedOrder.getProdId());
        if (product.getQuantity() < updatedOrder.getQuantity()) {
            throw new RuntimeException("Insufficient product quantity");
        }
        existing.setProdId(updatedOrder.getProdId());
        existing.setQuantity(updatedOrder.getQuantity());
        existing.setTotalPrice(product.getPrice() * updatedOrder.getQuantity());
        // TODO: Update product quantity
        return repository.save(existing);
    }

    public void delete(Long id) {
        repository.deleteById(id);
    }
}